{"version":3,"sources":["Form.js","Todo.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","evt","setState","desc","target","value","handleSubmit","preventDefault","onSubmit","state","id","editForm","toggleEdit","react_default","a","createElement","className","type","name","placeholder","onChange","maxLength","buttonText","Component","defaultProps","purpose","editMode","Todo","handleDelete","delete","toggleCompletion","completed","Form_Form","edit","onClick","List","addTodo","todo","newTodo","objectSpread","uuid","console","log","todos","concat","toConsumableArray","deleteTodo","filter","editTodo","listCopy","forEach","object","_this2","map","Todo_Todo","key","App","List_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAGqBA,qBAWjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIVQ,aAAe,SAAAC,GACXR,EAAKS,SAAS,CAACC,KAAMF,EAAIG,OAAOC,SANlBZ,EASlBa,aAAe,SAAAL,GACXA,EAAIM,iBACJd,EAAKD,MAAMgB,SAASf,EAAKgB,MAAOhB,EAAKD,MAAMkB,IAC3CjB,EAAKS,SAAS,CAAEC,KAAM,KACnBV,EAAKD,MAAMmB,UAAUlB,EAAKD,MAAMoB,cAXnCnB,EAAKgB,MAAQ,CAAEN,KAAMV,EAAKD,MAAMa,OAFlBZ,wEAiBd,OACIoB,EAAAC,EAAAC,cAAA,QAAMP,SAAUZ,KAAKU,aAAcU,UAAYpB,KAAKJ,MAAMmB,SAAW,iBAAmB,eACpFE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACIV,MAAST,KAAKa,MAAMN,KACpBc,KAAK,OACLC,KAAK,OACLC,YAAavB,KAAKJ,MAAM2B,YACxBC,SAAYxB,KAAKI,aACjBqB,UAAa,MAGrBR,EAAAC,EAAAC,cAAA,cAASnB,KAAKJ,MAAM8B,oBAxCFC,cAAbhC,EAEViC,aAAe,CAClBL,YAAa,WACbM,QAAS,UACTH,WAAY,SACZjB,MAAO,GACPK,GAAG,GACHgB,UAAU,aCPGC,cAEjB,SAAAA,EAAYnC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACdlC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAMJ,KAOVoC,aAAe,WACXnC,EAAKD,MAAMqC,OAAOpC,EAAKD,MAAMkB,KATfjB,EAYlBmB,WAAa,WACTnB,EAAKS,SAAS,CAACwB,UAAWjC,EAAKgB,MAAMiB,YAbvBjC,EAgBlBqC,iBAAmB,WACfrC,EAAKS,SAAS,CAAC6B,WAAYtC,EAAKgB,MAAMsB,aAftCtC,EAAKgB,MAAQ,CACTsB,WAAW,EACXL,UAAU,GAJAjC,wEAqBd,OACIoB,EAAAC,EAAAC,cAAA,WACKnB,KAAKa,MAAMiB,SACNb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACiB,EAAD,CAAM3B,MAAOT,KAAKJ,MAAMW,KAAMK,SAAYZ,KAAKJ,MAAMyC,KAAMvB,GAAId,KAAKJ,MAAMkB,GAAIE,WAAYhB,KAAKgB,WAAYD,UAAQ,IACnHE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAeH,EAAAC,EAAAC,cAAA,UAAQmB,QAAStC,KAAKgB,YAAYC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAEhFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAKmB,QAAStC,KAAKkC,iBAAkBd,UAAWpB,KAAKa,MAAMsB,UAAY,sBAAwB,aAC1FnC,KAAKJ,MAAMW,MAEhBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQmB,QAAStC,KAAKgB,YAAYC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAC/CH,EAAAC,EAAAC,cAAA,UAAQmB,QAAStC,KAAKgC,cAAcf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BApC3CO,aCEbY,qBAEjB,SAAAA,EAAY3C,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACd1C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,QAMJwC,QAAU,SAAAC,GACN,IAAIC,EAAO5C,OAAA6C,EAAA,EAAA7C,CAAA,GAAO2C,EAAP,CAAa3B,GAAI8B,QAC5BC,QAAQC,IAAIJ,GACZ7C,EAAKS,SAAS,CAACyC,MAAK,GAAAC,OAAAlD,OAAAmD,EAAA,EAAAnD,CAAMD,EAAKgB,MAAMkC,OAAjB,CAAwBL,OAV9B7C,EAalBqD,WAAa,SAAApC,GACTjB,EAAKS,SAAS,CAACyC,MAAOlD,EAAKgB,MAAMkC,MAAMI,OAAO,SAAAV,GAAI,OAAIA,EAAK3B,KAAOA,OAdpDjB,EAiBlBuD,SAAW,SAACX,EAAM3B,GACd,IAAIuC,EAAQvD,OAAAmD,EAAA,EAAAnD,CAAOD,EAAKgB,MAAMkC,OAC9BM,EAASC,QAAS,SAAAC,GACdV,QAAQC,IAAIS,GACTzC,IAAOyC,EAAOzC,KACbyC,EAAOhD,KAAOkC,EAAKlC,QAG3BV,EAAKS,SAAS,CAACyC,MAAOM,KAvBtBxD,EAAKgB,MAAQ,CACTkC,MAAO,IAHGlD,wEA4BT,IAAA2D,EAAAxD,KACL,OACIiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UACCnB,KAAKa,MAAMkC,MAAMU,IAAI,SAAAhB,GAAI,OACtBxB,EAAAC,EAAAC,cAACuC,EAAD,CACAC,IAAOlB,EAAK3B,GACZA,GAAM2B,EAAK3B,GACXP,KAAMkC,EAAKlC,KACX0B,OAAUuB,EAAKN,WACfb,KAAQmB,EAAKJ,aAIjBnC,EAAAC,EAAAC,cAACiB,EAAD,CAAMxB,SAAUZ,KAAKwC,QAASd,WAAW,oBA7CvBC,cCMnBiC,MARf,WACE,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC0C,EAAD,QCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f0120ba3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Form.css'\r\n\r\nexport default class Form extends Component {\r\n\r\n    static defaultProps = {\r\n        placeholder: 'New Task',\r\n        purpose: 'newTask',\r\n        buttonText: 'Submit',\r\n        value: '',\r\n        id:'',\r\n        editMode: false\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { desc: this.props.value}\r\n    }\r\n\r\n    handleChange = evt => {\r\n        this.setState({desc: evt.target.value})\r\n    }\r\n\r\n    handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        this.props.onSubmit(this.state, this.props.id);\r\n        this.setState({ desc: \"\" });\r\n        if(this.props.editForm) this.props.toggleEdit();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className ={this.props.editForm ? 'Todo-edit-form' : 'NewTodoForm'}>\r\n                <div>\r\n                    <input\r\n                        value = {this.state.desc}\r\n                        type=\"text\"\r\n                        name='desc'\r\n                        placeholder={this.props.placeholder}\r\n                        onChange = {this.handleChange}\r\n                        maxLength = {30}\r\n                    />\r\n                </div>\r\n                <button>{this.props.buttonText}</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Form from './Form'\r\nimport './Todo.css'\r\n\r\nexport default class Todo extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            completed: false,\r\n            editMode: false\r\n        }\r\n    }\r\n\r\n    handleDelete = () => {\r\n        this.props.delete(this.props.id);\r\n    }\r\n\r\n    toggleEdit = () => {\r\n        this.setState({editMode: !this.state.editMode})\r\n    }\r\n\r\n    toggleCompletion = () => {\r\n        this.setState({completed: !this.state.completed})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.editMode \r\n                    ? <div className='Todo'>\r\n                        <Form value={this.props.desc} onSubmit = {this.props.edit} id={this.props.id} toggleEdit={this.toggleEdit} editForm/>\r\n                        <span className='Todo-buttons'><button onClick={this.toggleEdit}><i className='fas fa-times'/></button></span>\r\n                      </div>\r\n                    : <div className='Todo'>\r\n                        <li  onClick={this.toggleCompletion} className={this.state.completed ? 'Todo-task completed' : 'Todo-task'}>\r\n                            {this.props.desc}\r\n                        </li>\r\n                        <div className='Todo-buttons'>\r\n                            <button onClick={this.toggleEdit}><i className='fas fa-pen' /></button>\r\n                            <button onClick={this.handleDelete}><i className='fas fa-trash' /></button>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport uuid from 'uuid'\r\nimport Todo from './Todo'\r\nimport Form from './Form';\r\nimport './List.css'\r\n\r\nexport default class List extends Component {\r\n\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            todos: []\r\n        }\r\n    }\r\n\r\n    addTodo = todo => {\r\n        let newTodo = {...todo, id: uuid()};\r\n        console.log(newTodo);\r\n        this.setState({todos: [...this.state.todos, newTodo]});\r\n    }\r\n\r\n    deleteTodo = id => {\r\n        this.setState({todos: this.state.todos.filter(todo => todo.id !== id)});\r\n    }\r\n\r\n    editTodo = (todo, id) => {\r\n        let listCopy = [...this.state.todos];\r\n        listCopy.forEach( object => {\r\n            console.log(object)\r\n            if(id === object.id){\r\n                object.desc = todo.desc;\r\n            }\r\n        })\r\n        this.setState({todos: listCopy});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"List\">\r\n                <h1>Todo List</h1>\r\n                <ul>\r\n                {this.state.todos.map(todo => \r\n                    <Todo \r\n                    key = {todo.id}\r\n                    id = {todo.id}\r\n                    desc={todo.desc}\r\n                    delete = {this.deleteTodo}\r\n                    edit = {this.editTodo}\r\n                    />\r\n                    )\r\n                }\r\n                <Form onSubmit={this.addTodo} buttonText='Submit'/>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport List from './List'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}